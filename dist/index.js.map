{
  "version": 3,
  "sources": ["../lib/binary.js", "../lib/module.js", "../lib/routine.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar readWASM = require( '@stdlib/fs-read-wasm' ).sync;\n\n\n// MAIN //\n\nvar wasm = readWASM( resolve( __dirname, '..', 'src', 'main.wasm' ) );\n\n\n// EXPORTS //\n\nmodule.exports = wasm;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar isWebAssemblyMemory = require( '@stdlib/assert-is-wasm-memory' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar inherits = require( '@stdlib/utils-inherit' );\nvar WasmModule = require( '@stdlib/wasm-module-wrapper' );\nvar format = require( '@stdlib/string-format' );\nvar wasmBinary = require( './binary.js' );\n\n\n// MAIN //\n\n/**\n* BLAS routine WebAssembly module wrapper constructor.\n*\n* @constructor\n* @param {Object} memory - WebAssembly memory instance\n* @throws {TypeError} must provide a WebAssembly memory instance\n* @returns {Module} module instance\n*\n* @example\n* var Memory = require( '@stdlib/wasm-memory' );\n* var oneTo = require( '@stdlib/array-one-to' );\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dnansumpw = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dnansumpw.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 3;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* dnansumpw.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var v = dnansumpw.main( N, xptr, 1 );\n* // returns 6.0\n*/\nfunction Module( memory ) {\n\tif ( !( this instanceof Module ) ) {\n\t\treturn new Module( memory );\n\t}\n\tif ( !isWebAssemblyMemory( memory ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a WebAssembly memory instance. Value: `%s`.', memory ) );\n\t}\n\t// Call the parent constructor:\n\tWasmModule.call( this, wasmBinary, memory, {\n\t\t'env': {\n\t\t\t'memory': memory\n\t\t}\n\t});\n\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Module, WasmModule );\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* @name main\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var Memory = require( '@stdlib/wasm-memory' );\n* var oneTo = require( '@stdlib/array-one-to' );\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dnansumpw = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dnansumpw.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 3;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* dnansumpw.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var v = dnansumpw.main( N, xptr, 1 );\n* // returns 6.0\n*/\nsetReadOnly( Module.prototype, 'main', function dnansumpw( N, xptr, strideX ) {\n\treturn this._instance.exports.stdlib_strided_dnansumpw( N, xptr, strideX );\n});\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation and alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var Memory = require( '@stdlib/wasm-memory' );\n* var oneTo = require( '@stdlib/array-one-to' );\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dnansumpw = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dnansumpw.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 3;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* dnansumpw.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var v = dnansumpw.ndarray( N, xptr, 1, 0 );\n* // returns 6.0\n*/\nsetReadOnly( Module.prototype, 'ndarray', function dnansumpw( N, xptr, strideX, offsetX ) {\n\treturn this._instance.exports.stdlib_strided_dnansumpw_ndarray( N, xptr, strideX, offsetX ); // eslint-disable-line max-len\n});\n\n\n// EXPORTS //\n\nmodule.exports = Module;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar inherits = require( '@stdlib/utils-inherit' );\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar Memory = require( '@stdlib/wasm-memory' );\nvar arrays2ptrs = require( '@stdlib/wasm-base-arrays2ptrs' );\nvar strided2object = require( '@stdlib/wasm-base-strided2object' );\nvar Module = require( './module.js' );\n\n\n// MAIN //\n\n/**\n* Routine constructor.\n*\n* @private\n* @constructor\n* @returns {Routine} routine instance\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Create a new routine:\n* var dnansumpw = new Routine();\n*\n* // Initialize the module:\n* dnansumpw.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* // Perform operation:\n* var v = dnansumpw.main( 4, x, 1 );\n* // returns 1.0\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Create a new routine:\n* var dnansumpw = new Routine();\n*\n* // Initialize the module:\n* dnansumpw.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 2.0, 1.0, NaN, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* // Perform operation:\n* var v = dnansumpw.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction Routine() {\n\tif ( !( this instanceof Routine ) ) {\n\t\treturn new Routine();\n\t}\n\tModule.call( this, new Memory({\n\t\t'initial': 0\n\t}));\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Routine, Module );\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* @name main\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Create a new routine:\n* var dnansumpw = new Routine();\n*\n* // Initialize the module:\n* dnansumpw.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 1.0, NaN, -2.0, 2.0 ] );\n*\n* // Perform operation:\n* var v = dnansumpw.main( 4, x, 1 );\n* // returns 1.0\n*/\nsetReadOnly( Routine.prototype, 'main', function dnansumpw( N, x, strideX ) {\n\treturn this.ndarray( N, x, strideX, stride2offset( N, strideX ) );\n});\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation and alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Create a new routine:\n* var dnansumpw = new Routine();\n*\n* // Initialize the module:\n* dnansumpw.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 2.0, 1.0, NaN, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* // Perform operation:\n* var v = dnansumpw.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\nsetReadOnly( Routine.prototype, 'ndarray', function dnansumpw( N, x, strideX, offsetX ) {\n\tvar ptrs;\n\tvar p0;\n\n\t// Convert the input arrays to \"pointers\" in the module's memory:\n\tptrs = arrays2ptrs( this, [\n\t\tstrided2object( N, x, strideX, offsetX )\n\t]);\n\tp0 = ptrs[ 0 ];\n\n\t// Perform computation by calling the corresponding parent method:\n\treturn Module.prototype.ndarray.call( this, N, p0.ptr, p0.stride, p0.offset );\n});\n\n\n// EXPORTS //\n\nmodule.exports = Routine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Routine = require( './routine.js' );\n\n\n// MAIN //\n\n/**\n* WebAssembly routine to compute the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* @name dnansumpw\n* @type {Routine}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* // Perform operation:\n* var v = dnansumpw.main( 4, x, 1 );\n* // returns 1.0\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 2.0, 1.0, NaN, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* // Perform operation:\n* var v = dnansumpw.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\nvar dnansumpw = new Routine();\ndnansumpw.initializeSync(); // eslint-disable-line node/no-sync\n\n\n// EXPORTS //\n\nmodule.exports = dnansumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* WebAssembly routine to compute the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-wasm-dnansumpw\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dnansumpw = require( '@stdlib/blas-ext-base-wasm-dnansumpw' );\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* // Perform operation:\n* var v = dnansumpw.main( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dnansumpw = require( '@stdlib/blas-ext-base-wasm-dnansumpw' );\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 2.0, 1.0, NaN, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* // Perform operation:\n* var v = dnansumpw.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*\n* @example\n* var Memory = require( '@stdlib/wasm-memory' );\n* var oneTo = require( '@stdlib/array-one-to' );\n* var zeros = require( '@stdlib/array-zeros' );\n* var dnansumpw = require( '@stdlib/blas-ext-base-wasm-dnansumpw' );\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var mod = new dnansumpw.Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* mod.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 3;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* mod.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var v = mod.main( N, xptr, 1 );\n* // returns 6.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar Module = require( './module.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'Module', Module );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"Module\": \"main.Module\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,MAAO,EAAE,QAC5BC,EAAW,QAAS,sBAAuB,EAAE,KAK7CC,EAAOD,EAAUD,EAAS,UAAW,KAAM,MAAO,WAAY,CAAE,EAKpED,EAAO,QAAUG,ICjCjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAwBA,IAAIC,EAAsB,QAAS,+BAAgC,EAC/DC,EAAc,QAAS,uDAAwD,EAC/EC,EAAW,QAAS,uBAAwB,EAC5CC,EAAa,QAAS,6BAA8B,EACpDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAa,IA8CjB,SAASC,EAAQC,EAAS,CACzB,GAAK,EAAG,gBAAgBD,GACvB,OAAO,IAAIA,EAAQC,CAAO,EAE3B,GAAK,CAACP,EAAqBO,CAAO,EACjC,MAAM,IAAI,UAAWH,EAAQ,6EAA8EG,CAAO,CAAE,EAGrH,OAAAJ,EAAW,KAAM,KAAME,EAAYE,EAAQ,CAC1C,IAAO,CACN,OAAUA,CACX,CACD,CAAC,EAEM,IACR,CAGAL,EAAUI,EAAQH,CAAW,EA+C7BF,EAAaK,EAAO,UAAW,OAAQ,SAAoBE,EAAGC,EAAMC,EAAU,CAC7E,OAAO,KAAK,UAAU,QAAQ,yBAA0BF,EAAGC,EAAMC,CAAQ,CAC1E,CAAC,EAgDDT,EAAaK,EAAO,UAAW,UAAW,SAAoBE,EAAGC,EAAMC,EAASC,EAAU,CACzF,OAAO,KAAK,UAAU,QAAQ,iCAAkCH,EAAGC,EAAMC,EAASC,CAAQ,CAC3F,CAAC,EAKDZ,EAAO,QAAUO,ICrMjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAwBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAW,QAAS,uBAAwB,EAC5CC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAS,QAAS,qBAAsB,EACxCC,EAAc,QAAS,+BAAgC,EACvDC,EAAiB,QAAS,kCAAmC,EAC7DC,EAAS,IA4Cb,SAASC,GAAU,CAClB,OAAQ,gBAAgBA,GAGxBD,EAAO,KAAM,KAAM,IAAIH,EAAO,CAC7B,QAAW,CACZ,CAAC,CAAC,EACK,MALC,IAAII,CAMb,CAGAN,EAAUM,EAASD,CAAO,EA8B1BN,EAAaO,EAAQ,UAAW,OAAQ,SAAoBC,EAAGC,EAAGC,EAAU,CAC3E,OAAO,KAAK,QAASF,EAAGC,EAAGC,EAASR,EAAeM,EAAGE,CAAQ,CAAE,CACjE,CAAC,EA+BDV,EAAaO,EAAQ,UAAW,UAAW,SAAoBC,EAAGC,EAAGC,EAASC,EAAU,CACvF,IAAIC,EACAC,EAGJ,OAAAD,EAAOR,EAAa,KAAM,CACzBC,EAAgBG,EAAGC,EAAGC,EAASC,CAAQ,CACxC,CAAC,EACDE,EAAKD,EAAM,CAAE,EAGNN,EAAO,UAAU,QAAQ,KAAM,KAAME,EAAGK,EAAG,IAAKA,EAAG,OAAQA,EAAG,MAAO,CAC7E,CAAC,EAKDd,EAAO,QAAUQ,ICrKjB,IAAAO,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,IA+BVC,EAAY,IAAID,EACpBC,EAAU,eAAe,EAKzBF,EAAO,QAAUE,IC0BjB,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IAKbF,EAAaC,EAAM,SAAUC,CAAO,EAKpC,OAAO,QAAUD",
  "names": ["require_binary", "__commonJSMin", "exports", "module", "resolve", "readWASM", "wasm", "require_module", "__commonJSMin", "exports", "module", "isWebAssemblyMemory", "setReadOnly", "inherits", "WasmModule", "format", "wasmBinary", "Module", "memory", "N", "xptr", "strideX", "offsetX", "require_routine", "__commonJSMin", "exports", "module", "setReadOnly", "inherits", "stride2offset", "Memory", "arrays2ptrs", "strided2object", "Module", "Routine", "N", "x", "strideX", "offsetX", "ptrs", "p0", "require_main", "__commonJSMin", "exports", "module", "Routine", "dnansumpw", "setReadOnly", "main", "Module"]
}
